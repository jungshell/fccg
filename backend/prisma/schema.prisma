generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int          @id @default(autoincrement())
  email              String       @unique
  password           String
  name               String
  phone              String?
  avatarUrl          String?
  address            String?
  role               String       @default("MEMBER")
  status             String       @default("ACTIVE")
  attendance         Int?         @default(0)
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  lastLoginAt        DateTime?
  statusChangeReason String?
  statusChangedAt    DateTime?
  attendances        Attendance[]
  comments           Comment[]
  galleryItems       Gallery[]    @relation("UploaderGallery")
  games              Game[]       @relation("CreatedGames")
  likes              Like[]
  notices            Notice[]     @relation("AuthorNotice")
  schedules          Schedule[]   @relation("CreatedSchedules")
  votes              Vote[]
}

model Schedule {
  id           Int       @id @default(autoincrement())
  title        String
  description  String?
  date         DateTime
  createdById  Int
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  galleryItems Gallery[]
  createdBy    User      @relation("CreatedSchedules", fields: [createdById], references: [id])
}

model Game {
  id              Int           @id @default(autoincrement())
  date            DateTime
  time            String?
  location        String
  gameType        String
  eventType       String?
  mercenaryCount  Int           @default(0)
  memberNames     String        @default("[]")
  selectedMembers String        @default("[]")
  autoGenerated   Boolean       @default(false)
  confirmed       Boolean       @default(false)
  createdById     Int
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  attendances     Attendance[]
  createdBy       User          @relation("CreatedGames", fields: [createdById], references: [id])
  voteSessions    VoteSession[]
}

model VoteSession {
  id            Int      @id @default(autoincrement())
  weekStartDate DateTime
  startTime     DateTime
  endTime       DateTime
  isActive      Boolean  @default(false)
  isCompleted   Boolean  @default(false)
  gameId        Int?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  votes         Vote[]
  game          Game?    @relation(fields: [gameId], references: [id])
}

model Attendance {
  id        Int      @id @default(autoincrement())
  userId    Int
  gameId    Int
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  game      Game     @relation(fields: [gameId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Vote {
  id            Int         @id @default(autoincrement())
  userId        Int
  voteSessionId Int
  selectedDays  String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  voteSession   VoteSession @relation(fields: [voteSessionId], references: [id])
  user          User        @relation(fields: [userId], references: [id])
}

model Gallery {
  id         Int       @id @default(autoincrement())
  title      String
  imageUrl   String
  videoUrl   String?
  uploaderId Int
  scheduleId Int?
  eventDate  DateTime?
  eventType  String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  comments   Comment[]
  schedule   Schedule? @relation(fields: [scheduleId], references: [id])
  uploader   User      @relation("UploaderGallery", fields: [uploaderId], references: [id])
  likes      Like[]
  tags       Tag[]
}

model Tag {
  id        Int     @id @default(autoincrement())
  name      String
  galleryId Int
  gallery   Gallery @relation(fields: [galleryId], references: [id])
}

model Like {
  id        Int      @id @default(autoincrement())
  userId    Int
  galleryId Int
  createdAt DateTime @default(now())
  gallery   Gallery  @relation(fields: [galleryId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Comment {
  id        Int      @id @default(autoincrement())
  userId    Int
  galleryId Int
  content   String
  createdAt DateTime @default(now())
  gallery   Gallery  @relation(fields: [galleryId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Notice {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  authorId  Int
  isPinned  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation("AuthorNotice", fields: [authorId], references: [id])
}
