// 공통 API 클라이언트 (프론트 전역에서 사용)
import { API_ENDPOINTS } from '../constants';

// ===== 타입 =====
export type Role = 'SUPER_ADMIN' | 'ADMIN' | 'MEMBER' | 'GUEST';
export type MemberStatus = 'ACTIVE' | 'INACTIVE' | 'SUSPENDED' | 'DELETED';

export interface Member {
  id: number;
  name: string;
  email?: string;
  role?: Role;
  status?: MemberStatus;
}

export interface Game {
  id: number;
  date: string;
  time?: string;
  location?: string;
  gameType?: string;
  autoGenerated?: boolean;
  confirmed?: boolean;
  memberNames?: string[] | string;
}

export interface StatsSummary {
  totalMembers: number;
  confirmedGames: number;
  totalGames: number;
  activeVotePeriod?: string;
}

// ===== 토큰 유틸 =====
export const getValidToken = (): string | null => {
  const s = typeof window !== 'undefined' ? window.sessionStorage.getItem('token') : null;
  const l = typeof window !== 'undefined' ? window.localStorage.getItem('token') : null;
  return s || l;
};

const authHeaders = () => {
  const token = getValidToken();
  return token ? { Authorization: `Bearer ${token}` } : {};
};

const request = async <T = any>(path: string, init: RequestInit = {}): Promise<T> => {
  const url = path.startsWith('http') ? path : `${API_ENDPOINTS.BASE_URL}${path}`;
  const res = await fetch(url, {
    headers: { 'Content-Type': 'application/json', ...authHeaders(), ...(init.headers || {}) },
    ...init,
  });
  if (!res.ok) throw new Error(await res.text());
  const ct = res.headers.get('content-type') || '';
  return (ct.includes('application/json') ? (await res.json()) : (await res.text())) as T;
};

// ===== 인증 =====
export const login = (email: string, password: string) =>
  request<{ token: string }>('/login', { method: 'POST', body: JSON.stringify({ email, password }) });

export const register = (name: string, email: string, password: string) =>
  request('/register', { method: 'POST', body: JSON.stringify({ name, email, password }) });

export const updateProfile = (data: Partial<Member>) =>
  request('/profile', { method: 'PUT', body: JSON.stringify(data) });

export const changePassword = (currentPassword: string, newPassword: string) =>
  request('/change-password', {
    method: 'POST',
    body: JSON.stringify({ currentPassword, newPassword }),
  });

export const getProfile = () => request('/profile');

// ===== 멤버 관리 =====
export const getMemberStats = () => request('/activity-analysis');

export const updateMember = (memberId: number, data: Partial<Member>) =>
  request(`/members/${memberId}`, { method: 'PUT', body: JSON.stringify(data) });

export const deleteMember = (memberId: number) =>
  request(`/members/${memberId}`, { method: 'DELETE' });

export const resetMemberPassword = (memberId: number) =>
  request(`/members/${memberId}/reset-password`, { method: 'POST' });

// ===== 투표/일정 =====
export const getUnifiedVoteDataNew = () => request('/unified-vote-data');

export const getAdminVoteSessionsSummary = () => request('/votes/sessions/summary');

export const getSavedVoteResults = () => request('/admin/vote-sessions/results');

export const aggregateAndSaveVoteResults = (payload: any) =>
  request('/votes/aggregate/save', { method: 'POST', body: JSON.stringify(payload) });

export const closeVoteSession = (id: number) =>
  request(`/vote-sessions/${id}/close`, { method: 'POST' });

export const resumeVoteSession = (id: number) =>
  request(`/vote-sessions/${id}/resume`, { method: 'POST' });

export const deleteVoteSession = (id: number) =>
  request(`/vote-sessions/${id}`, { method: 'DELETE' });

export const bulkDeleteVoteSessions = (ids: number[]) =>
  request('/cleanup-duplicate-sessions', { method: 'POST', body: JSON.stringify({ ids }) });

export const renumberVoteSessions = () =>
  request('/cleanup-duplicate-sessions', { method: 'POST' });

export const startWeeklyVote = () => request('/start-weekly-vote', { method: 'POST' });

// ===== 기타 유틸 =====
export const apiGet = request;