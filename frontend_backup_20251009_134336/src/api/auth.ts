import axios from 'axios';

// API 재시도 로직을 위한 유틸리티 함수
const retryRequest = async (requestFn: () => Promise<any>, maxRetries = 3, delay = 1000) => {
  for (let i = 0; i < maxRetries; i++) {
    try {
      return await requestFn();
    } catch (error) {
      if (i === maxRetries - 1) throw error;
      
      // 네트워크 오류나 연결 거부 오류인 경우에만 재시도
      if ((error as any).code === 'ERR_NETWORK' || (error as any).code === 'ERR_CONNECTION_REFUSED') {
        console.log(`API 재시도 ${i + 1}/${maxRetries}...`);
        await new Promise(resolve => setTimeout(resolve, delay * (i + 1)));
      } else {
        throw error;
      }
    }
  }
};

// 타입 정의
export interface Game {
  id: number;
  date: string;
  time: string;
  location: string;
  eventType: string;
  gameType: string;
  mercenaryCount: number;
  memberNames: string[];
  selectedMembers: string[];
  autoGenerated: boolean;
  confirmed: boolean;
  createdById: number;
  createdBy?: {
    id: number;
    name: string;
  };
  createdAt: string;
  updatedAt: string;
}

export interface Member {
  id: number;
  name: string;
  email: string;
  role: string;
  status: string;
  attendance: number;
  createdAt: string;
  updatedAt: string;
  lastLoginAt?: string;
  statusChangedAt?: string;
  statusChangeReason?: string;
}

export interface StatsSummary {
  totalMembers: number;
  activeMembers: number;
  thisWeekGames: number;
  nextWeekVote: {
    id: number;
    weekStartDate: string;
    endTime: string;
    isActive: boolean;
  };
}

// API 클라이언트 설정
const apiClient = axios.create({
  baseURL: 'http://localhost:4000/api/auth',
  headers: {
    'Content-Type': 'application/json',
  },
});

// 요청 인터셉터 - 토큰 자동 추가
apiClient.interceptors.request.use(
  (config) => {
    const token = localStorage.getItem('token');
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);

// 응답 인터셉터 - 토큰 만료 처리
apiClient.interceptors.response.use(
  (response) => response,
  (error) => {
    if (error.response?.status === 401) {
      localStorage.removeItem('token');
      window.location.href = '/login';
    }
    return Promise.reject(error);
  }
);

// 토큰 유효성 검증 및 갱신
export const getValidToken = async () => {
  let token = localStorage.getItem('token');
  
  if (!token) {
    console.error('❌ 토큰이 없습니다.');
    throw new Error('토큰이 없습니다.');
  }
  
  try {
    console.log('🔍 토큰 유효성 검증 시작...');
    // 토큰 유효성 검증 (재시도 로직 적용)
    await retryRequest(() => apiClient.get('/verify-token'));
    console.log('✅ 토큰 유효성 검증 성공');
    return token;
  } catch (error) {
    console.error('❌ 토큰 유효성 검증 실패:', error);
    
    // 토큰이 만료된 경우 갱신 시도
    if ((error as any).response?.status === 401) {
      console.log('🔄 토큰 갱신 시도...');
      try {
        const refreshResponse = await retryRequest(() => 
          apiClient.post('/refresh-token', {}, {
            headers: {
              'Authorization': `Bearer ${token}`
            }
          })
        );
        
        const newToken = refreshResponse.data.token;
        localStorage.setItem('token', newToken);
        console.log('✅ 토큰 갱신 성공');
        return newToken;
      } catch (refreshError) {
        console.error('❌ 토큰 갱신 실패:', refreshError);
        localStorage.removeItem('token');
        throw new Error('토큰 갱신에 실패했습니다. 다시 로그인해주세요.');
      }
    }
    
    // 다른 오류의 경우
    localStorage.removeItem('token');
    
    if ((error as any).response?.status === 404) {
      throw new Error('토큰 검증 서비스를 찾을 수 없습니다.');
    } else {
      throw new Error('토큰 검증 중 오류가 발생했습니다.');
    }
  }
};

// 인증 관련 API
export const login = async (email: string, password: string) => {
  const response = await apiClient.post('/login', { email, password });
  return response.data;
};

export const register = async (userData: any) => {
  const response = await apiClient.post('/register', userData);
  return response.data;
};

export const logout = async () => {
  const response = await apiClient.post('/logout');
  return response.data;
};

export const verifyToken = async () => {
  const response = await apiClient.get('/verify-token');
  return response.data;
};

// 회원 관리 API
export const getMembers = async () => {
  const response = await apiClient.get('/members');
  return response.data;
};

export const createMember = async (memberData: any) => {
  const response = await apiClient.post('/members', memberData);
  return response.data;
};

export const updateMember = async (id: number, memberData: any) => {
  const response = await apiClient.put(`/members/${id}`, memberData);
  return response.data;
};

export const deleteMember = async (id: number) => {
  const response = await apiClient.delete(`/members/${id}`);
  return response.data;
};

// 경기 관리 API
export const getGames = async () => {
  const response = await apiClient.get('/games');
  return response.data;
};

export const createGame = async (gameData: any) => {
  const response = await apiClient.post('/games', gameData);
  return response.data;
};

export const updateGame = async (id: number, gameData: any) => {
  const response = await apiClient.put(`/games/${id}`, gameData);
  return response.data;
};

export const deleteGame = async (id: number) => {
  const response = await apiClient.delete(`/games/${id}`);
  return response.data;
};

// 투표 관련 API
export const getVoteSessions = async () => {
  const response = await apiClient.get('/vote-sessions');
  return response.data;
};

export const createVoteSession = async (sessionData: any) => {
  const response = await apiClient.post('/vote-sessions', sessionData);
  return response.data;
};

export const updateVoteSession = async (id: number, sessionData: any) => {
  const response = await apiClient.put(`/vote-sessions/${id}`, sessionData);
  return response.data;
};

export const deleteVoteSession = async (id: number) => {
  const response = await apiClient.delete(`/vote-sessions/${id}`);
  return response.data;
};

export const closeVoteSession = async (sessionId: number) => {
  const response = await apiClient.post(`/vote-sessions/${sessionId}/close`);
  return response.data;
};

export const resumeVoteSession = async (sessionId: number) => {
  const response = await apiClient.post(`/vote-sessions/${sessionId}/resume`);
  return response.data;
};

export const bulkDeleteVoteSessions = async () => {
  const response = await apiClient.delete(`/vote-sessions/bulk-delete`);
  return response.data;
};
export const renumberVoteSessions = async () => {
  const response = await apiClient.post(`/vote-sessions/renumber`);
  return response.data;
};
export const deleteVote = async (userId: number) => {
  const response = await apiClient.delete(`/votes/${userId}`);
  return response.data;
};

// 투표 데이터 API
export const getVoteData = async () => {
  const response = await apiClient.get('/vote-data');
  return response.data;
};

export const submitVote = async (voteData: any) => {
  const response = await apiClient.post('/vote', voteData);
  return response.data;
};

export const getUnifiedVoteData = async () => {
  const response = await retryRequest(() => apiClient.get('/unified-vote-data'));
  return response.data;
};

// 통합 데이터 API
export const getUnifiedData = async () => {
  const response = await retryRequest(() => apiClient.get('/unified-data'));
  return response.data;
};

// 갤러리 API
export const getGallery = async () => {
  const response = await apiClient.get('/gallery');
  return response.data;
};

export const uploadImage = async (formData: FormData) => {
  const response = await apiClient.post('/gallery/upload', formData, {
    headers: {
      'Content-Type': 'multipart/form-data',
    },
  });
  return response.data;
};

// 공지사항 API
export const getNotices = async () => {
  const response = await apiClient.get('/notices');
  return response.data;
};

export const createNotice = async (noticeData: any) => {
  const response = await apiClient.post('/notices', noticeData);
  return response.data;
};

export const updateNotice = async (id: number, noticeData: any) => {
  const response = await apiClient.put(`/notices/${id}`, noticeData);
  return response.data;
};

export const deleteNotice = async (id: number) => {
  const response = await apiClient.delete(`/notices/${id}`);
  return response.data;
};

// 통계 API
export const getStats = async () => {
  const response = await apiClient.get('/stats');
  return response.data;
};

// 관리자 API
export const getAdminData = async () => {
  const response = await apiClient.get('/admin/data');
  return response.data;
};

export const getAdminVoteSessions = async () => {
  const response = await apiClient.get('/admin/vote-sessions');
  return response.data;
};

export const getAdminVoteSessionsSummary = async () => {
  const response = await apiClient.get('/votes/sessions/summary');
  return response.data;
};

// 투표 결과 API
export const getVoteResults = async () => {
  const response = await apiClient.get('/vote-results');
  return response.data;
};

export const getSavedVoteResults = async (sessionId: number) => {
  const response = await apiClient.get(`/saved-vote-results/${sessionId}`);
  return response.data;
};

export const aggregateAndSaveVoteResults = async () => {
  const response = await apiClient.post('/aggregate-vote-results');
  return response.data;
};

// 주간 투표 시작 API
export const startWeeklyVote = async () => {
  const response = await apiClient.post('/start-weekly-vote');
  return response.data;
};

// 통합 투표 데이터 API (새로운 버전)
export const getUnifiedVoteDataNew = async () => {
  const response = await apiClient.get('/unified-vote-data');
  return response.data;
};

// 비밀번호 변경 API
export const changePassword = async (currentPassword: string, newPassword: string) => {
  const response = await apiClient.post('/change-password', {
    currentPassword,
    newPassword
  });
  return response.data;
};

// 회원 비밀번호 초기화 API
export const resetMemberPassword = async (memberId: number) => {
  const response = await apiClient.post(`/members/${memberId}/reset-password`);
  return response.data;
};

// 모든 회원 조회 API
export const getAllMembers = async () => {
  const response = await apiClient.get('/members');
  return response.data;
};

// 회원 통계 조회 API
export const getMemberStats = async () => {
  const response = await retryRequest(() => apiClient.get('/admin/member-stats'));
  return response.data;
};

// 프로필 업데이트 API
export const updateProfile = async (profileData: any) => {
  const response = await apiClient.put('/profile', profileData);
  return response.data;
};

// 프로필 조회 API
export const getProfile = async () => {
  const response = await retryRequest(() => apiClient.get('/profile'));
  return response.data;
};

export default apiClient;